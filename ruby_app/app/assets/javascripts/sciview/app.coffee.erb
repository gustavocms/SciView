app = angular.module('sciview', [
  'ngAnimate'
  'ngCookies'
  'ngRoute'
  'ui.router'
  'ui.bootstrap'
  'ui.utils'
  'angular-data.DS'
  'angular-data.DSCacheFactory'
  'ngSocket'
  'sv.ui.controllers'
  'sv.ui.services'
  'sv.ui.filters'
  'sv.ui.directives'
  'ngS3upload'
])

# register additional modules
angular.module("sv.ui.controllers", [])
angular.module('sv.ui.services', ['ngResource'])
angular.module("sv.ui.directives", [])

# first thing to run after loading
app.run(['$rootScope', '$state', '$stateParams',
  ($rootScope, $state, $stateParams) ->
#     It's very handy to add references to $state and $stateParams to the $rootScope
#     so that you can access them from any scope within your applications.For example,
#     <li ui-sref-active="active }"> will set the <li> # to active whenever
#     'contacts.list' or one of its decendents is active.
    $rootScope.$state = $state
    $rootScope.$stateParams = $stateParams
    $rootScope.$on('$stateChangeError',
      (event, toState, toParams, fromState, fromParams, error) ->
        console.log(error)
    )
    $rootScope.$on('event:unauthorized', (event, rejection) ->
      if rejection.config.url not in ["/api/v1/sessions","/api/v1/users"]
        console.log 'unauthorized'
        $state.go('login')
    )
])

#DeviseInterceptor injection
app.config ([
  "$httpProvider"
  ($httpProvider) ->
    $httpProvider.interceptors.push "DeviseInterceptor"
])

#routing configuration
app.config(['$urlRouterProvider', '$stateProvider',
  ($urlRouterProvider, $stateProvider) ->

    $urlRouterProvider.otherwise('/data-sets/1')

    $stateProvider
      .state('data-sets', {
          url: '/data-sets',
          templateUrl: '<%= asset_path('sciview/data_sets.html') %>',
          controller: 'DataSetsController'
      })
      .state('data-sets.single', {
          url: '/:dataSetId',
          templateUrl: '<%= asset_path('sciview/data_set.html') %>',
          controller: 'DataSetController'
      })
      .state('data-sets.single.discuss', {
          url: '/discuss',
          templateUrl: '<%= asset_path('sciview/discuss.html') %>',
          controller: 'DiscussController'
      })
      .state('navigator', {
          url: '/navigator',
          templateUrl: '<%= asset_path('sciview/navigator.html') %>',
          controller: 'NavigatorController'
      })
      .state('navigator.upload', {
          url: '/upload',
          templateUrl: '<%= asset_path('sciview/partials/upload.html') %>',
      })      
      .state('signup', {
          url: '/signup',
          templateUrl: '<%= asset_path('sciview/signup.html') %>',
          controller: 'UserController'
      })      
      .state('login', {
          url: '/login',
          templateUrl: '<%= asset_path('sciview/login.html') %>',
          controller: 'UserController'
      })
])

#sockets configuration
app.factory('mySocket', (ngSocket) ->
  mySocket = ngSocket("ws://#{window.location.host}") 

  mySocket.emit = (event, data) ->
    mySocket.send
      event: event
      data: data

  # receive messages
  mySocket.onEvent = (event, callBack, autoApply = false) ->
    mySocket.onMessage(
      (message) ->
        msg = JSON.parse(message.data).message
        if msg.event == event
          console.info(event + ' event -> ', msg.data)
          callBack(msg.data)
      autoApply: autoApply
    )

  mySocket.updateEvent = (resource, id, data) ->
    mySocket.send(
      event: "update"
      resource: resource
      id: id
      data: data)

  mySocket.onUpdateEvent = (resource, callBack, autoApply = false) ->
    mySocket.onMessage(
      (message) ->
        msg = JSON.parse(message.data).message
        if msg.event == "update" and msg.resource == resource
          console.info(resource + ' updateEvent -> ', msg.data)
          callBack(msg.data)
      autoApply: autoApply
    )

  mySocket.subscribe = (resource, id) ->
    mySocket.send(
      event: "subscribe"
      resource: resource
      id: id)

  mySocket.unsubscribe = (resource, id) ->
    mySocket.send(
      event: "unsubscribe"
      resource: resource
      id: id)

  mySocket
)

