<button onclick="addMyGraph(testData1());">3 Series</button>
<button onclick="addMyGraph(testData2());">Random with high peaks</button>
<button onclick="addMyGraph(testData3());">Random with inconsistent sample frequencies</button>
<button onclick="addMyGraph(testData4());">JSON date parsing</button>
<button onclick="addMyJSONGraph();">TempoDB webservice</button>


<input id="tempodb-series-key" type="text" value="my-sine-key" />
<!--<input id="tempodb-series-key" type="text" />-->
<p id="series-name"></p>
<p id="series-attributes"></p>
<p id="series-tags"></p>
<div id="chart" class='with-3d-shadow with-transitions'>
  <svg style="height: 500px;"></svg>
</div>

<style>
    #project-label {
        display: block;
        font-weight: bold;
        margin-bottom: 1em;
    }
    #project-icon {
        float: left;
        height: 32px;
        width: 32px;
    }
    #project-description {
        margin: 0;
        padding: 0;
    }
</style>



<script>
    //TODO: make this asynchronous
    function getSeriesList() {
        var dataSet = [];
        var tempoURI = '/series/list';
        $.ajax({
            url: tempoURI,
            async: false,
            success: function(data) {
                dataSet = data;
            }
        });
        return dataSet;
    }

    function addMyJSONGraph(){
        addMyGraph(testData5($('#tempodb-series-key').val()))
    }
//    var seriesList = [
//        {"id": "a3d10d42d2874a699a05b4f82c7499f1",  "key": "100-00000", "name": "", "attributes": {}, "tags": []},
//        {"id": "9a9014aa2ea1400eaf33ca60ba2e692c",  "key": "gen-sample", "name": "", "attributes": {}, "tags": []},
//        {"id": "2b7fde06e20a492db5915cfe15eb829d",  "key": "gen-sample1", "name": "", "attributes": {}, "tags": []},
//        {"id": "88918c008ae544d29bb4b5b31204da57",  "key": "gen-sample2.Acceleration", "name": "", "attributes": {"name": "Acceleration", "frequency": "1 Hz"}, "tags": ["green", "sample"]},
//        {"id": "90d2f967270140d9a846191cb6fd05c5",  "key": "gen-sample2.Position", "name": "", "attributes": {"name": "Position", "frequency": "1 Hz"}, "tags": ["red", "sample"]},
//        {"id": "8b01f61a71724d1b914e6b76f50547cf",  "key": "gen-sample2.Velocity", "name": "", "attributes": {"name": "Velocity", "frequency": "1 Hz"}, "tags": ["blue", "sample"]},
//        {"id": "f30e9f2812f548e7a37b2e420dc7ac0f",  "key": "gen-series3.0", "name": "", "attributes": {}, "tags": ["gen-series3"]},
//        {"id": "1cde0da242d347b4837fef265281f73d",  "key": "gen-series3.1", "name": "", "attributes": {}, "tags": ["gen-series3"]},
//        {"id": "99a6c71557694457ab8ccd1a00dc828e",  "key": "gen-series3.2", "name": "", "attributes": {}, "tags": ["gen-series3"]},
//        {"id": "eb03ac0e68bf47d0b0c005aad1a16174",  "key": "my-custom-key", "name": "", "attributes": {}, "tags": []},
//        {"id": "5d2648a02423416e8a9f51d4eada498f",  "key": "my-random-key", "name": "", "attributes": {}, "tags": []},
//        {"id": "2552055117f247c095d165dabb3720c7",  "key": "my-sine-key", "name": "", "attributes": {}, "tags": []}
//    ];
    var seriesList = getSeriesList();

    $(function() {
        $("#tempodb-series-key").autocomplete({
            minLength: 0,

            source: function (request, response) {
                var term = request.term,
                    matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");

                response($.grep(seriesList, function (item) {
                    return matcher.test(item.key + item.tags.join(', '));
                }));
            },
            focus: function( event, ui ) {
                $( "#tempodb-series-key" ).val( ui.item.key);
                return false;
            },
            select: function( event, ui ) {
                $( "#tempodb-series-key" ).val( ui.item.key);
                $( "#series-name" ).html("Name: " + ui.item.name);
                $( "#series-tags" ).html("Tags: " + ui.item.tags.join(', '));
                $( "#series-attributes" ).html("Attributes: " + JSON.stringify(ui.item.attributes));
                addMyJSONGraph();
                return false;
            }

        })
        .data( "ui-autocomplete" )._renderItem = function( ul, item ) {
            return $( "<li>" )
                    .append( "<a>" + item.key + "<p style='font-size: small; padding: 0; margin: 0'>Tags:" + item.tags.join(', ') + "</p></a>" )
                    .appendTo( ul );
        };

    });
</script>


<script>
  function addMyGraph(dataSet)
  {
      nv.addGraph(function() {
          var chart = nv.models.lineWithFocusChart();

          // chart.transitionDuration(500);
//        chart.xAxis
//                .tickFormat(d3.format(',f'));
//        chart.x2Axis
//                .tickFormat(d3.format(',f'));


          //D3 Time Formatting: https://github.com/mbostock/d3/wiki/Time-Formatting

//        var formatString = '%d-%m-%y';
//        var formatString = '%H:%M:%S:%L';

          var formatString = '%-I:%M:%S:%L%p';

          chart.xAxis
                  .tickFormat(function(d) {
                      return d3.time.format(formatString)(new Date(d))
                  });

          chart.x2Axis
                  .tickFormat(function(d) {
                      return d3.time.format(formatString)(new Date(d))
                  });


          //Not sure if setting the time scale is necessary ...
          // perhaps because Date objects become milliseconds?
//        chart.xScale = d3.time.scale();

          chart.yAxis
                  .tickFormat(d3.format(',.2f'));
          chart.y2Axis
                  .tickFormat(d3.format(',.2f'));

          d3.select('#chart svg')
                  .datum(dataSet)
                  .call(chart);

          nv.utils.windowResize(chart.update);

          return chart;
      });
  }



    function testData1() {
        return stream_layers(3,128,.1).map(function(data, i) {
            return {
                key: 'Stream' + i,
                values: data
            };
        });
    }

    //Ints
    function testData2() {
        var arr = [];
        for(var i=0; i<400; i++)
        {
            arr.push( { x: i, y: i / (2.0 * Math.random() ) });
        }


        var dataSet = [];
        var o1 = {
            key: "My Test",
            values: arr
        };
        dataSet.push(o1);

        return dataSet;
    }

    //X-Axis: Dates down to the millisecond
    //Y-Axis: random increasing line
    //Gets noticeable lag when I have 4000 data points
    function testData3() {
        var arr = [];

        var d = new Date();

        for(var i=0; i<2000; i++)
        {
//            d.setMilliseconds(d.getMilliseconds() + (100000 * Math.random() + 5)); // irregular samples

//            d.setMilliseconds(d.getMilliseconds() + 1); // sample every millisecond
            d.setMilliseconds(d.getMilliseconds() + i*i); // each sample gets farther apart -- showcases time scale
            arr.push(
                { //x: m.add('days', 1).toDate(),
                  x: new Date(d.getTime()),
                  y: i + (1000.0 * Math.random() ) }
            );
        }


        var dataSet = [];
        var o1 = {
            key: "My Test",
            values: arr
        };
        dataSet.push(o1);

        return dataSet;
    }

    function testData4() {

        var jsonObj = JSON.parse('[{"key":"My Test2","values":[{"x":"2014-04-05T04:00:58.743Z","y":461.38070384040475},{"x":"2014-04-05T04:00:58.744Z","y":978.1196029614657},{"x":"2014-04-05T04:00:58.748Z","y":894.8572814911604},{"x":"2014-04-05T04:00:58.757Z","y":374.3492101524025},{"x":"2014-04-05T04:00:58.773Z","y":710.2243900727481},{"x":"2014-04-05T04:00:58.798Z","y":912.9113295301795},{"x":"2014-04-05T04:00:58.834Z","y":222.1391032859683},{"x":"2014-04-05T04:00:58.883Z","y":521.2049149144441},{"x":"2014-04-05T04:00:58.947Z","y":874.4522205945104},{"x":"2014-04-05T04:00:59.028Z","y":607.1796341948211},{"x":"2014-04-05T04:00:59.128Z","y":704.2579140886664},{"x":"2014-04-05T04:00:59.249Z","y":105.42167007364333},{"x":"2014-04-05T04:00:59.393Z","y":567.5727006867528},{"x":"2014-04-05T04:00:59.562Z","y":15.801120979711413},{"x":"2014-04-05T04:00:59.758Z","y":193.68738288618624},{"x":"2014-04-05T04:00:59.983Z","y":166.65070397779346},{"x":"2014-04-05T04:01:00.239Z","y":17.547104446217418},{"x":"2014-04-05T04:01:00.528Z","y":220.49996746517718},{"x":"2014-04-05T04:01:00.852Z","y":413.3329345677048},{"x":"2014-04-05T04:01:01.213Z","y":844.1037932932377},{"x":"2014-04-05T04:01:01.613Z","y":251.22459230944514},{"x":"2014-04-05T04:01:02.054Z","y":268.8948791977018},{"x":"2014-04-05T04:01:02.538Z","y":858.7891472298652},{"x":"2014-04-05T04:01:03.067Z","y":513.3603733982891},{"x":"2014-04-05T04:01:03.643Z","y":540.6385907214135},{"x":"2014-04-05T04:01:04.268Z","y":579.7200664877892},{"x":"2014-04-05T04:01:04.944Z","y":532.3833589665592},{"x":"2014-04-05T04:01:05.673Z","y":230.0430776067078},{"x":"2014-04-05T04:01:06.457Z","y":199.38039786368608},{"x":"2014-04-05T04:01:07.298Z","y":556.2996556013823},{"x":"2014-04-05T04:01:08.198Z","y":393.6536335106939},{"x":"2014-04-05T04:01:09.159Z","y":108.08701910451055},{"x":"2014-04-05T04:01:10.183Z","y":472.6847534701228},{"x":"2014-04-05T04:01:11.272Z","y":487.35303170233965},{"x":"2014-04-05T04:01:12.428Z","y":415.8982527591288},{"x":"2014-04-05T04:01:13.653Z","y":565.0705670379102},{"x":"2014-04-05T04:01:14.949Z","y":925.4716470967978},{"x":"2014-04-05T04:01:16.318Z","y":384.8018301539123}]}]');

        var arrayWithDateObjs = [];

        var arrayWithStringObjs = jsonObj[0].values;
        var arrayLength = arrayWithStringObjs.length;
        for (var i = 0; i < arrayLength; i++) {
            arrayWithDateObjs.push({x: new Date(arrayWithStringObjs[i].x), y: arrayWithStringObjs[i].y});
        }

        var dataSet = [];
        var o1 = {
            key: jsonObj[0].key,
            values: arrayWithDateObjs
        };
        dataSet.push(o1);

        return dataSet;
    }

  function testData5(key) {
      var dataSet = [];
      var tempoURI = '/data/' + key;
      //TODO: make this async
      $.ajax({
          url: tempoURI,
          async: false,
          success: function(data) {
              console.log(data);
              var jsonObj=data;
              var arrayWithDateObjs = [];

              var arrayWithStringObjs = jsonObj[0].values;
              var arrayLength = arrayWithStringObjs.length;
              for (var i = 0; i < arrayLength; i++) {
                  arrayWithDateObjs.push({x: new Date(arrayWithStringObjs[i].ts), y: arrayWithStringObjs[i].value});
              }


              var o1 = {
                  key: jsonObj[0].key,
                  values: arrayWithDateObjs
              };
              dataSet.push(o1);
          }
      });
      return dataSet;
  }


</script>

