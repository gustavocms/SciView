#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
Bundler.require(:default, :development)

# A CLI tool for generating sample datasets
class DataGen < Thor
  desc 'create KEY', 'Generate a test dataset for a given key'
  option :count, required: true, type: :numeric
  option :start_time
  option :end_time
  option :type, enum: %w(sin square line power)
  option :force, alias: 'f', type: :boolean
  def create(key)
    count = options[:count]
    start_time = Chronic.parse(options[:start_time]) || Time.now
    end_time = Chronic.parse(options[:end_time]) || start_time + (0.001 * count)
    client = TempoDB::Client.new(ENV['TEMPODB_API_KEY'], ENV['TEMPODB_API_SECRET'])

    check_existing_set

    say "Creating #{count} data points starting at #{start_time}..."
    series = client.create_series(key)
    data = generate_data(start_time, end_time, count)

    client.write_key(series.key, data)
  end

  private

  def check_existing_set(client, options)
    unless client.get_series(key: key).empty?
      if options[:force]
        client.delete_series(key: key)
      else
        say "Series for key \"#{key}\" already exists. (Use --force to overwrite)", :red
        return
      end
    end
  end

  def generate_data(start_time, end_time, count)
    interval = (end_time.to_f - start_time.to_f) / count
    Range.new(start_time, end_time).step(interval).map do |t|
      TempoDB::DataPoint.new(Time.at(t).utc, rand(100))
    end
  end
end

DataGen.start(ARGV)

# vim:ft=ruby
